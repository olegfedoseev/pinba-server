package client

import (
	//	"fmt"
	"bytes"
	"compress/zlib"
	"encoding/binary"
	"github.com/stretchr/testify/assert"
	"testing"
	"time"
)

var validData = []byte{0xa, 0x8, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x7, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x72, 0x75, 0x1a, 0x9, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x70, 0x68, 0x70, 0x20, 0x0, 0x28, 0xa6, 0x2, 0x30, 0x80, 0x80, 0x40, 0x3d, 0x7, 0x9b, 0xba, 0x3c, 0x45, 0x0, 0x0, 0x0, 0x0, 0x4d, 0xa, 0xd7, 0x23, 0x3c, 0x50, 0x1, 0x50, 0x1, 0x5d, 0x9e, 0xd2, 0xc1, 0x3b, 0x5d, 0x4a, 0x96, 0x13, 0x3a, 0x60, 0x3, 0x60, 0x1, 0x68, 0x4, 0x68, 0x6, 0x68, 0x8, 0x68, 0xa, 0x70, 0x5, 0x70, 0x7, 0x70, 0x9, 0x70, 0xb, 0x7a, 0x8, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x61, 0x6c, 0x31, 0x7a, 0x8, 0x72, 0x65, 0x71, 0x5f, 0x74, 0x61, 0x67, 0x31, 0x7a, 0x8, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x61, 0x6c, 0x32, 0x7a, 0x8, 0x72, 0x65, 0x71, 0x5f, 0x74, 0x61, 0x67, 0x32, 0x7a, 0x4, 0x6b, 0x65, 0x79, 0x31, 0x7a, 0x4, 0x76, 0x61, 0x6c, 0x31, 0x7a, 0x4, 0x6b, 0x65, 0x79, 0x32, 0x7a, 0x4, 0x76, 0x61, 0x6c, 0x32, 0x7a, 0x4, 0x6b, 0x65, 0x79, 0x33, 0x7a, 0x4, 0x76, 0x61, 0x6c, 0x33, 0x7a, 0x4, 0x6b, 0x65, 0x79, 0x34, 0x7a, 0x4, 0x76, 0x61, 0x6c, 0x34, 0x80, 0x1, 0xc8, 0x1, 0x88, 0x1, 0x80, 0xc0, 0x85, 0x3, 0xa0, 0x1, 0x1, 0xa0, 0x1, 0x3, 0xa8, 0x1, 0x0, 0xa8, 0x1, 0x2, 0xb5, 0x1, 0x0, 0x0, 0x0, 0x0, 0xb5, 0x1, 0x0, 0x0, 0x0, 0x0, 0xbd, 0x1, 0x0, 0x0, 0x0, 0x0, 0xbd, 0x1, 0x0, 0x0, 0x0, 0x0}

var testDataTimestamp int64 = 1452146656
var testData = []byte{
	0xba, 0x0, 0x0, 0x0, 0xe0, 0xff, 0x8d, 0x56, 0x78, 0x9c, 0xba, 0xc7, 0xc0,
	0xc0, 0xc0, 0xc5, 0x91, 0x91, 0x5f, 0x5c, 0x92, 0x97, 0x98, 0x9b, 0x2a, 0xc4,
	0x5e, 0x92, 0x5a, 0x5c, 0xa2, 0x57, 0x54, 0x2a, 0xc5, 0x99, 0x99, 0x97, 0x92,
	0x5a, 0xa1, 0x57, 0x90, 0x51, 0xa0, 0xc0, 0xa0, 0xb1, 0x8c, 0xc9, 0xa0, 0xa1,
	0xc1, 0xc1, 0x96, 0x7d, 0xf6, 0x2e, 0x1b, 0x57, 0xa0, 0x7a, 0x6, 0x5f, 0xae,
	0xeb, 0xca, 0x36, 0x1, 0x8c, 0x1, 0x8c, 0xb1, 0xf3, 0x2e, 0x1d, 0xb4, 0x8e,
	0xf5, 0x9a, 0x26, 0x6c, 0x95, 0xc0, 0x9c, 0xc0, 0x98, 0xc1, 0x92, 0xc1, 0x96,
	0xc1, 0x91, 0xc1, 0x55, 0xc0, 0x5a, 0xc0, 0x5e, 0xc0, 0x59, 0xc0, 0x5d, 0xc5,
	0x51, 0x94, 0x5a, 0x18, 0x5f, 0x96, 0x98, 0x63, 0x8, 0x61, 0x95, 0x24, 0xa6,
	0x1b, 0xc2, 0xc5, 0x8c, 0xe0, 0x62, 0x46, 0x55, 0x2c, 0xd9, 0xa9, 0x95, 0x86,
	0x55, 0x2c, 0x60, 0x95, 0x20, 0xb6, 0x11, 0x98, 0xd, 0x11, 0x37, 0x6, 0xb3,
	0x8d, 0xc1, 0x6c, 0x13, 0x30, 0xdb, 0xa4, 0x81, 0xf1, 0x4, 0x63, 0x7, 0x63,
	0xc3, 0x81, 0x56, 0xe6, 0x5, 0x8c, 0x8c, 0xb, 0x18, 0x99, 0x57, 0x30, 0x32,
	0xac, 0x60, 0x64, 0xda, 0xca, 0x8, 0x72, 0x1a, 0x84, 0xdc, 0x8b, 0x44, 0xe,
	0x7f, 0x1f, 0x2, 0x2, 0x0, 0x0, 0xff, 0xff, 0x7, 0x4d, 0x83, 0x7,
}

func TestReadValidServerMessage(t *testing.T) {
	message := ServerMessage{}

	r := bytes.NewReader(testData)

	message.ReadFrom(r)
	assert.EqualValues(t, message.Timestamp, testDataTimestamp)
	assert.EqualValues(t, message.Data.Len(), 2*len(validData)+8)

	message.ReadFrom(r)
	assert.EqualValues(t, message.Timestamp, testDataTimestamp)
	assert.EqualValues(t, message.Data.Len(), 2*len(validData)+8)
}

func generateTestData(t *testing.T) {
	var testData bytes.Buffer
	var b bytes.Buffer
	w := zlib.NewWriter(&b)

	n := int32(len(validData))
	binary.Write(w, binary.LittleEndian, n)
	w.Write(validData)

	binary.Write(w, binary.LittleEndian, n)
	w.Write(validData)
	w.Close()

	length := int32(b.Len())
	ts := int32(time.Now().Unix())
	t.Logf("ts: %v", ts)

	header := new(bytes.Buffer)
	binary.Write(header, binary.LittleEndian, length)
	binary.Write(header, binary.LittleEndian, ts)

	testData.Write(header.Bytes())
	testData.Write(b.Bytes())

	t.Logf("testData: %#v", testData.Bytes())
}
